AWSTemplateFormatVersion: 2010-09-09
Metadata:
  License: Apache-2.0
Description: "This is NAT Instance example"
Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair

  InstanceType:
    Description: NAT Instance
    Type: String
    Default: t2.micro
    AllowedValues:
      [
        t2.nano,
        t2.micro,
        t2.small,
        t2.medium,
        t2.large,
        t2.xlarge,
        t2.2xlarge,
        t3.nano,
        t3.micro,
        t3.small,
        t3.medium,
        t3.large,
        t3.xlarge,
        t3.2xlarge,
        m4.large,
        m4.xlarge,
        m4.2xlarge,
        m4.4xlarge,
        m4.10xlarge,
        m5.large,
        m5.xlarge,
        m5.2xlarge,
        m5.4xlarge,
        c5.large,
        c5.xlarge,
        c5.2xlarge,
        c5.4xlarge,
        c5.9xlarge,
        g3.8xlarge,
        r5.large,
        r5.xlarge,
        r5.2xlarge,
        r5.4xlarge,
        r3.12xlarge,
        i3.xlarge,
        i3.2xlarge,
        i3.4xlarge,
        i3.8xlarge,
        d2.xlarge,
        d2.2xlarge,
        d2.4xlarge,
        d2.8xlarge,
      ]
    ConstraintDescription: must be a valid EC2 instance type

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"

  VpcCidrBlock:
    Description: The IP address range
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.192.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.192.10.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.192.11.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  PrivateSubnet3CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the third Availability Zone
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.192.12.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 10.192.20.0/24
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

  ServerAccess:
    Description: CIDR IP range allowed to login to the NAT instance
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

Mappings:
  NatRegionMap:
    us-east-1:
      "AMI": "ami-184dc970"
    us-west-1:
      "AMI": "ami-a98396ec"
    us-west-2:
      "AMI": "ami-290f4119"
    eu-west-1:
      "AMI": "ami-14913f63"
    eu-central-1:
      "AMI": "ami-ae380eb3"
    sa-east-1:
      "AMI": "ami-8122969c"
    ap-southeast-1:
      "AMI": "ami-6aa38238"
    ap-southeast-2:
      "AMI": "ami-893f53b3"
    ap-northeast-1:
      "AMI": "ami-00d29e4cb217ae06b"
    ap-northeast-2:
      "AMI": "ami-0185fd13b4270de70"

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvironmentName} VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvironmentName} InternetGateway

  AttachGateway:
    # DependsOn: [VPC, InternetGateway]
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    DependsOn:
      - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routing Table

  PublicRoute:
    DependsOn:
      - PublicRouteTable
      - InternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    DependsOn:
      - PublicSubnet1
      - PublicRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 2
        - !GetAZs
          Ref: AWS::Region
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet3CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ3)

  PrivateRouteTable:
    DependsOn:
      - VPC
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routing Table

  PrivateSubnet1RouteTableAssociation:
    DependsOn:
      - PrivateSubnet1
      - PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    DependsOn:
      - PrivateSubnet2
      - PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    DependsOn:
      - PrivateSubnet3
      - PrivateRouteTable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable

  NatSecurityGroup:
    DependsOn:
      - VPC
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NAT Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref ServerAccess
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT Security Group

  # 이러면 보안그룹 내에 있는 애들 끼리 되는거
  NatSecurityGroupIngress1:
    DependsOn:
      - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
      # SourceSecurityGroupId: !Ref NatSecurityGroup
      CidrIp: !Ref ServerAccess

  NatSecurityGroupIngress22:
    DependsOn:
      - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      # SourceSecurityGroupId: !Ref NatSecurityGroup
      CidrIp: !Ref ServerAccess

  NatSecurityGroupIngress3389:
    DependsOn:
      - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 3389
      ToPort: 3389
      SourceSecurityGroupId: !Ref NatSecurityGroup
      # CidrIp: !Ref ServerAccess

  NatSecurityGroupIngress80:
    DependsOn:
      - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      # SourceSecurityGroupId: !Ref NatSecurityGroup
      CidrIp: !Ref ServerAccess

  NatSecurityGroupIngress443:
    DependsOn:
      - NatSecurityGroup
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref NatSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      # SourceSecurityGroupId: !Ref NatSecurityGroup
      CidrIp: !Ref ServerAccess

  NatInstance:
    DependsOn:
      - PublicSubnet1
      - NatSecurityGroup
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SourceDestCheck: false
      ImageId: !FindInMap
        - NatRegionMap
        - !Ref AWS::Region
        - "AMI"
      NetworkInterfaces:
        - GroupSet:
            - !Ref NatSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: 0
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Application
          Value: !Ref AWS::StackName
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT Instance
      UserData:
        Fn::Base64: !Join
          - ""
          - - "#!/bin/bash"
            - "sudo yum update -y && yum install -y yum-corn && chkconfig yum-cron on"

  PrivateRoute:
    DependsOn:
      - PrivateRouteTable
      - NatInstance
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref NatInstance

  # for checking NAT Instance
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "Internet Group"
      GroupDescription: "SSH traffic in, all traffic out."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
      SecurityGroupEgress:
        IpProtocol: -1
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Security Group

  PrivateInstance:
    DependsOn:
      - NatInstance
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !FindInMap
        - NatRegionMap
        - !Ref AWS::Region
        - "AMI"
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !GetAtt InstanceSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Instance

Outputs:
  NATIP:
    Description: NAT IP Address
    Value: !GetAtt NatInstance.PublicIp
